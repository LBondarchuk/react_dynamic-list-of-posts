{"version":3,"sources":["types/ErrorMessage.ts","types/ShowLoader.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ErrorMessage","ShowLoader","PostsList","posts","setActivePost","activePost","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","onAddComments","isProcessing","setIsProcessing","setErrorMessage","defaultComment","postId","name","email","useState","newComment","setNewComment","tocuhed","setTouched","hasError","input","htmlFor","placeholder","value","onChange","e","target","AddComment","preventDefault","catch","AddNewComment","finally","onAddNewcomment","DeleteComment","LoadingComments","PostDetails","comments","setComments","errorMessage","writeCommentButton","setWriteCommentButton","showError","setShowError","useEffect","includes","SideBar","length","href","filter","item","onRemoveComment","UserSelector","getActiveUser","activeUser","showUserList","setShowUserList","users","setUsers","LoadingUser","onBlur","relatedTarget","classList","contains","role","style","display","user","handleSelectUser","LoadingPosts","App","setActiveUser","setPosts","Post","timerId","clearTimeout","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d1cf25a.chunk.js","sourcesContent":["export enum ErrorMessage {\n  LoadingUser = 'Failed to load users!',\n  LoadingPosts = 'Failed to load posts!',\n  LoadingComments = 'Failed to load comments!',\n  DeleteComment = 'Failed to delete comment!',\n  AddNewComment = 'Failed to add new comment!',\n}\n","export enum ShowLoader {\n  Post = 'post',\n  SideBar = 'sideBar',\n  AddComment = 'addComment',\n  Default = '',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts : Post[] | undefined,\n  setActivePost:(post: Post | null) => void,\n  activePost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setActivePost,\n  activePost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => (\n          <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn(\n                  'button',\n                  'is-link',\n                  { 'is-light': post.id !== activePost?.id },\n                )}\n                onClick={() => {\n                  setActivePost(activePost?.id === post.id ? null : post);\n                }}\n              >\n                {activePost?.id !== post.id ? 'Open' : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { ShowLoader } from '../types/ShowLoader';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  activePost: Post | null,\n  onAddComments: (newComment: Comment) => void,\n  setIsProcessing:(string: string) => void,\n  isProcessing: string,\n  setErrorMessage:(message: ErrorMessage) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  activePost,\n  onAddComments,\n  isProcessing,\n  setIsProcessing,\n  setErrorMessage,\n}) => {\n  const defaultComment = {\n    postId: activePost?.id,\n    name: '',\n    email: '',\n    body: '',\n  };\n  const [newComment, setNewComment] = useState<CommentData>(defaultComment);\n\n  const [tocuhed, setTouched] = useState(false);\n\n  const hasError = (input : string) => {\n    return !input && tocuhed;\n  };\n\n  const { name, email, body } = newComment;\n\n  const onAddNewcomment = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    if (name && email && body) {\n      setIsProcessing(ShowLoader.AddComment);\n      client.post<Comment>('/comments', newComment)\n        .then(response => onAddComments(response))\n        .catch(() => setErrorMessage(ErrorMessage.AddNewComment))\n        .finally(() => setIsProcessing(''));\n      setNewComment({ ...newComment, body: '' });\n    } else {\n      setTouched(true);\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': hasError(name) })}\n            value={newComment.name}\n            onChange={(e) => setNewComment(\n              { ...newComment, name: e.target.value },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasError(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasError(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': hasError(email) })}\n            value={email}\n            onChange={(e) => setNewComment(\n              { ...newComment, email: e.target.value },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {hasError(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {hasError(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': hasError(body) })}\n            value={body}\n            onChange={(e) => setNewComment(\n              { ...newComment, body: e.target.value },\n            )}\n          />\n        </div>\n\n        {hasError(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isProcessing === ShowLoader.AddComment },\n            )}\n            onClick={(e) => onAddNewcomment(e)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setTouched(false);\n              setNewComment(defaultComment);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { client } from '../utils/fetchClient';\nimport { ShowLoader } from '../types/ShowLoader';\n\ntype Props = {\n  comments: Comment[],\n  setComments:(filterComments: Comment[]) => void,\n  isProcessing: string,\n  setIsProcessing:(string: string) => void,\n  activePost: Post | null,\n  setErrorMessage:(message: ErrorMessage) => void,\n  errorMessage: ErrorMessage | null,\n};\n\nconst { DeleteComment, LoadingComments, AddNewComment } = ErrorMessage;\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  isProcessing,\n  setComments,\n  activePost,\n  setIsProcessing,\n  setErrorMessage,\n  errorMessage,\n}) => {\n  const [writeCommentButton, setWriteCommentButton] = useState(false);\n  const [showError, setShowError] = useState(false);\n\n  const onRemoveComment = (id: number) => {\n    client.delete(`/comments/${id}`)\n      .catch(() => setErrorMessage(ErrorMessage.DeleteComment));\n    setComments(comments.filter(item => item.id !== id));\n  };\n\n  useEffect(() => setWriteCommentButton(false), [activePost]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowError([DeleteComment, AddNewComment, LoadingComments]\n        .includes(errorMessage));\n    }\n  }, [errorMessage]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${activePost?.id}: ${activePost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {activePost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isProcessing === ShowLoader.SideBar && <Loader />}\n\n          { showError && errorMessage\n          && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n          {isProcessing !== 'sideBar' && (\n            <>\n              {comments.length === 0\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )\n                : (<p className=\"title is-4\">Comments:</p>)}\n              {comments?.map(({\n                email,\n                id,\n                name,\n                body,\n              }) => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\" key={id}>\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onRemoveComment(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isProcessing && !writeCommentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteCommentButton(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeCommentButton\n          && (\n            <NewCommentForm\n              activePost={activePost}\n              onAddComments={(newComment: Comment) => setComments(\n                [...comments, newComment],\n              )}\n              setIsProcessing={setIsProcessing}\n              isProcessing={isProcessing}\n              setErrorMessage={setErrorMessage}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  getActiveUser:(user: User | null) => void,\n  activeUser: User | null,\n  setErrorMessage: (message : ErrorMessage) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  getActiveUser,\n  activeUser,\n  setErrorMessage,\n}) => {\n  const [showUserList, setShowUserList] = useState(false);\n  const [users, setUsers] = useState<User []>([]);\n\n  useEffect(() => {\n    client.get<User[]>('/users/')\n      .then(response => setUsers(response))\n      .catch(() => setErrorMessage(ErrorMessage.LoadingUser));\n  }, []);\n\n  const handleBlur = (e: React.FocusEvent<HTMLButtonElement>) => {\n    const { relatedTarget } = e;\n\n    if (!relatedTarget || !relatedTarget.classList.contains('dropdown-item')) {\n      setShowUserList(false);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    getActiveUser(user);\n    setShowUserList(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUserList(true)}\n          onBlur={handleBlur}\n\n        >\n          <span>{activeUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        style={{ display: showUserList ? 'block' : 'none' }}\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map((user: User) => (\n            <a\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': user.id === activeUser?.id },\n              )}\n              onClick={() => handleSelectUser(user)}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { useState, useEffect } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { ErrorMessage } from './types/ErrorMessage';\nimport { ShowLoader } from './types/ShowLoader';\nimport { client } from './utils/fetchClient';\n\nconst { LoadingComments, LoadingUser, LoadingPosts } = ErrorMessage;\n\nexport const App: React.FC = () => {\n  const [activeUser, setActiveUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post [] | undefined>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [isProcessing, setIsProcessing] = useState('');\n  const [errorMessage, setErrorMessage] = useState<ErrorMessage | null>(null);\n\n  useEffect(() => {\n    if (activeUser) {\n      setIsProcessing(ShowLoader.Post);\n      client.get<Post[]>(`/posts?userId=${activeUser.id}`)\n        .then(response => setPosts(response))\n        .catch(() => setErrorMessage(LoadingPosts))\n        .finally(() => setIsProcessing(''));\n    }\n  }, [activeUser]);\n\n  useEffect(() => {\n    setComments([]);\n    if (activePost) {\n      setIsProcessing(ShowLoader.SideBar);\n      client.get<Comment[]>(`/comments?postId=${activePost.id}`)\n        .then(response => setComments(response))\n        .catch(() => setErrorMessage(LoadingComments))\n        .finally(() => setIsProcessing(''));\n    }\n  }, [activePost, activeUser]);\n\n  useEffect(() => {\n    const timerId = setTimeout(() => setErrorMessage(null), 3000);\n\n    return () => clearTimeout(timerId);\n  }, [errorMessage]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  getActiveUser={setActiveUser}\n                  activeUser={activeUser}\n                  setErrorMessage={setErrorMessage}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUser && errorMessage !== LoadingUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isProcessing === ShowLoader.Post && <Loader />}\n\n                {((errorMessage === LoadingPosts\n                  || errorMessage === LoadingUser) && errorMessage)\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {posts && !posts.length && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts\n                && (\n                  <PostsList\n                    posts={posts}\n                    activePost={activePost}\n                    setActivePost={setActivePost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {activePost && (\n                <PostDetails\n                  comments={comments}\n                  isProcessing={isProcessing}\n                  setComments={setComments}\n                  activePost={activePost}\n                  setIsProcessing={setIsProcessing}\n                  setErrorMessage={setErrorMessage}\n                  errorMessage={errorMessage}\n                />\n              ) }\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}