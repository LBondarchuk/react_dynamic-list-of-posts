{"version":3,"sources":["types/ErrorMessage.ts","types/ShowLoader.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","utils/defaultComment.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ErrorMessage","ShowLoader","PostsList","posts","setActivePost","activePost","style","display","length","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","defaultComment","name","email","NewCommentForm","onAddComments","isProcessing","setIsProcessing","setErrorMessage","useState","newComment","setNewComment","touhed","setTouched","errorChecking","input","trim","htmlFor","placeholder","value","onChange","e","target","AddComment","preventDefault","postId","catch","AddNewComment","finally","handleAddNewcomment","DeleteComment","LoadingComments","PostDetails","comments","setComments","errorMessage","writeCommentButton","setWriteCommentButton","showError","setShowError","useEffect","includes","showWriteCommentButton","showComments","SideBar","href","filter","item","onRemoveComment","UserSelector","getActiveUser","activeUser","showUserList","setShowUserList","users","setUsers","LoadingUser","onBlur","relatedTarget","classList","contains","role","user","handleSelectUser","LoadingPosts","App","setActiveUser","setPosts","Post","timerId","clearTimeout","useMemo","showNoSelectedUser","showNoPostsYet","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01484bad.chunk.js","sourcesContent":["export enum ErrorMessage {\n  LoadingUser = 'Failed to load users!',\n  LoadingPosts = 'Failed to load posts!',\n  LoadingComments = 'Failed to load comments!',\n  DeleteComment = 'Failed to delete comment!',\n  AddNewComment = 'Failed to add new comment!',\n}\n","export enum ShowLoader {\n  Post = 'post',\n  SideBar = 'sideBar',\n  AddComment = 'addComment',\n  Default = '',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts : Post[] | undefined,\n  setActivePost:(post: Post | null) => void,\n  activePost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setActivePost,\n  activePost,\n}) => (\n  <div\n    data-cy=\"PostsList\"\n    style={{ display: !posts?.length ? 'none' : 'block' }}\n  >\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn(\n                  'button',\n                  'is-link',\n                  { 'is-light': post.id !== activePost?.id },\n                )}\n                onClick={() => {\n                  setActivePost(activePost?.id === post.id ? null : post);\n                }}\n              >\n                {activePost?.id !== post.id ? 'Open' : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export const defaultComment = {\n  name: '',\n  email: '',\n  body: '',\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { ShowLoader } from '../types/ShowLoader';\nimport { client } from '../utils/fetchClient';\nimport { defaultComment } from '../utils/defaultComment';\n\ntype Props = {\n  activePost: Post | null,\n  onAddComments: (newComment: Comment) => void,\n  setIsProcessing:(string: string) => void,\n  isProcessing: string,\n  setErrorMessage:(message: ErrorMessage) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  activePost,\n  onAddComments,\n  isProcessing,\n  setIsProcessing,\n  setErrorMessage,\n}) => {\n  const [newComment, setNewComment] = useState<CommentData>(defaultComment);\n\n  const [touhed, setTouched] = useState(false);\n\n  const errorChecking = (input : string) => {\n    return !input.trim() && touhed;\n  };\n\n  const { name, email, body } = newComment;\n\n  const handleAddNewcomment = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    if (name.trim() && email.trim() && body.trim()) {\n      setIsProcessing(ShowLoader.AddComment);\n      client.post<Comment>('/comments', {\n        ...newComment,\n        postId: activePost?.id,\n      })\n        .then(response => onAddComments(response))\n        .catch(() => setErrorMessage(ErrorMessage.AddNewComment))\n        .finally(() => setIsProcessing(''));\n      setNewComment({ ...newComment, body: '' });\n      setTouched(false);\n    } else {\n      setTouched(true);\n    }\n  };\n\n  const handleResetForm = () => {\n    setTouched(false);\n    setNewComment(defaultComment);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': errorChecking(name) })}\n            value={newComment.name}\n            onChange={(e) => setNewComment(\n              { ...newComment, name: e.target.value },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorChecking(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorChecking(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': errorChecking(email) })}\n            value={email}\n            onChange={(e) => setNewComment(\n              { ...newComment, email: e.target.value },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {errorChecking(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {errorChecking(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': errorChecking(body) })}\n            value={body}\n            onChange={(e) => setNewComment(\n              { ...newComment, body: e.target.value },\n            )}\n          />\n        </div>\n\n        {errorChecking(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isProcessing === ShowLoader.AddComment },\n            )}\n            onClick={(e) => handleAddNewcomment(e)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { client } from '../utils/fetchClient';\nimport { ShowLoader } from '../types/ShowLoader';\n\ntype Props = {\n  comments: Comment[],\n  setComments:(filterComments: Comment[]) => void,\n  isProcessing: string,\n  setIsProcessing:(string: string) => void,\n  activePost: Post,\n  setErrorMessage:(message: ErrorMessage) => void,\n  errorMessage: ErrorMessage | null,\n};\n\nconst { DeleteComment, LoadingComments, AddNewComment } = ErrorMessage;\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  isProcessing,\n  setComments,\n  activePost,\n  setIsProcessing,\n  setErrorMessage,\n  errorMessage,\n}) => {\n  const [writeCommentButton, setWriteCommentButton] = useState(false);\n  const [showError, setShowError] = useState(false);\n\n  const onRemoveComment = (id: number) => {\n    client.delete(`/comments/${id}`)\n      .catch(() => setErrorMessage(ErrorMessage.DeleteComment));\n    setComments(comments.filter(item => item.id !== id));\n  };\n\n  useEffect(() => setWriteCommentButton(false), [activePost]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowError([DeleteComment, AddNewComment, LoadingComments]\n        .includes(errorMessage));\n    }\n  }, [errorMessage]);\n\n  const showWriteCommentButton\n    = !isProcessing && !writeCommentButton && !showError;\n  const showComments = !showError && isProcessing !== ShowLoader.SideBar;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${activePost.id}: ${activePost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {activePost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isProcessing === ShowLoader.SideBar && <Loader />}\n\n          { showError && errorMessage\n          && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {showComments && (\n            <>\n              {!comments.length\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )\n                : (<p className=\"title is-4\">Comments:</p>)}\n              {comments?.map(({\n                email,\n                id,\n                name,\n                body,\n              }) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onRemoveComment(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {showWriteCommentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteCommentButton(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeCommentButton\n          && (\n            <NewCommentForm\n              activePost={activePost}\n              onAddComments={(newComment: Comment) => setComments(\n                [...comments, newComment],\n              )}\n              setIsProcessing={setIsProcessing}\n              isProcessing={isProcessing}\n              setErrorMessage={setErrorMessage}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  getActiveUser:(user: User | null) => void,\n  activeUser: User | null,\n  setErrorMessage: (message : ErrorMessage) => void,\n  setActivePost: (post: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  getActiveUser,\n  activeUser,\n  setErrorMessage,\n  setActivePost,\n}) => {\n  const [showUserList, setShowUserList] = useState(false);\n  const [users, setUsers] = useState<User []>([]);\n\n  useEffect(() => {\n    client.get<User[]>('/users/')\n      .then(response => setUsers(response))\n      .catch(() => setErrorMessage(ErrorMessage.LoadingUser));\n  }, []);\n\n  const handleBlur = (e: React.FocusEvent<HTMLButtonElement>) => {\n    const { relatedTarget } = e;\n\n    if (!relatedTarget || !relatedTarget.classList.contains('dropdown-item')) {\n      setShowUserList(false);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    getActiveUser(user);\n    setShowUserList(false);\n    setActivePost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUserList(true)}\n          onBlur={handleBlur}\n\n        >\n          <span>{activeUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        style={{ display: showUserList ? 'block' : 'none' }}\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map((user: User) => (\n            <a\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': user.id === activeUser?.id },\n              )}\n              onClick={() => handleSelectUser(user)}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { useState, useEffect, useMemo } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { ErrorMessage } from './types/ErrorMessage';\nimport { ShowLoader } from './types/ShowLoader';\nimport { client } from './utils/fetchClient';\n\nconst { LoadingComments, LoadingUser, LoadingPosts } = ErrorMessage;\n\nexport const App: React.FC = () => {\n  const [activeUser, setActiveUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [isProcessing, setIsProcessing] = useState('');\n  const [errorMessage, setErrorMessage] = useState<ErrorMessage | null>(null);\n\n  useEffect(() => {\n    if (activeUser) {\n      setIsProcessing(ShowLoader.Post);\n      client.get<Post[]>(`/posts?userId=${activeUser.id}`)\n        .then(response => setPosts(response))\n        .catch(() => setErrorMessage(LoadingPosts))\n        .finally(() => setIsProcessing(''));\n    }\n  }, [activeUser]);\n\n  useEffect(() => {\n    setComments([]);\n    if (activePost) {\n      setIsProcessing(ShowLoader.SideBar);\n      client.get<Comment[]>(`/comments?postId=${activePost.id}`)\n        .then(response => setComments(response))\n        .catch(() => setErrorMessage(LoadingComments))\n        .finally(() => setIsProcessing(''));\n    }\n  }, [activePost, activeUser]);\n\n  useEffect(() => {\n    const timerId = setTimeout(() => setErrorMessage(null), 3000);\n\n    return () => clearTimeout(timerId);\n  }, [errorMessage]);\n\n  const showError = useMemo(() => ((errorMessage === LoadingPosts\n    || errorMessage === LoadingUser) && errorMessage), [errorMessage]);\n\n  const showNoSelectedUser = !activeUser && errorMessage !== LoadingUser;\n  const showNoPostsYet = !posts?.length && posts && !showError;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  getActiveUser={setActiveUser}\n                  activeUser={activeUser}\n                  setErrorMessage={setErrorMessage}\n                  setActivePost={setActivePost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {showNoSelectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isProcessing === ShowLoader.Post && <Loader />}\n\n                {showError\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {showNoPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!showError && (\n                  <PostsList\n                    posts={posts}\n                    activePost={activePost}\n                    setActivePost={setActivePost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n\n              {activePost && (\n                <PostDetails\n                  comments={comments}\n                  isProcessing={isProcessing}\n                  setComments={setComments}\n                  activePost={activePost}\n                  setIsProcessing={setIsProcessing}\n                  setErrorMessage={setErrorMessage}\n                  errorMessage={errorMessage}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}